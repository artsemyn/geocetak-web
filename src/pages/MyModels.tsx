// src/pages/MyModels.tsx
import React, { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import {
  Container,
  Typography,
  Box,
  Card,
  CardContent,
  Grid,
  Button,
  IconButton,
  Chip,
  Alert,
  CircularProgress,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Stack,
  Tooltip,
  Menu,
  MenuItem
} from '@mui/material'
import {
  ArrowBack,
  Download,
  Delete,
  Share,
  Public,
  Lock as Private,
  MoreVert,
  ViewInAr,
  DateRange,
  FileDownload
} from '@mui/icons-material'
import { useAuthStore } from '../stores/authStore'
import ModelExportService from '../services/modelExportService'
import { ModelExport } from '../services/supabase'
import Navbar from '../components/Navbar'

export default function MyModels() {
  const navigate = useNavigate()
  const { user } = useAuthStore()
  const [models, setModels] = useState<ModelExport[]>([])
  const [loading, setLoading] = useState(true)
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)
  const [selectedModel, setSelectedModel] = useState<ModelExport | null>(null)
  const [menuAnchor, setMenuAnchor] = useState<null | HTMLElement>(null)
  const [downloading, setDownloading] = useState<number | null>(null)

  useEffect(() => {
    if (user) {
      loadUserModels()
    }
  }, [user])

  const loadUserModels = async () => {
    if (!user) return

    setLoading(true)
    try {
      const userModels = await ModelExportService.getUserModels(user.id)
      setModels(userModels)
    } catch (error) {
      console.error('Error loading user models:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleDownload = async (model: ModelExport) => {
    setDownloading(model.id)
    try {
      const downloadUrl = await ModelExportService.downloadModel(model.id)
      if (downloadUrl) {
        // In a real implementation, this would trigger a file download
        console.log('Downloading:', downloadUrl)

        // Simulate download
        const link = document.createElement('a')
        link.href = `data:text/plain;charset=utf-8,${encodeURIComponent(
          `STL File: ${model.project_name}\nCreated: ${model.created_at}\nGenerated by GeoCetak`
        )}`
        link.download = `${model.project_name}.stl`
        link.click()

        // Refresh models to update download count
        await loadUserModels()
      }
    } catch (error) {
      console.error('Error downloading model:', error)
    } finally {
      setDownloading(null)
    }
  }

  const handleDelete = async () => {
    if (!selectedModel || !user) return

    try {
      const success = await ModelExportService.deleteModel(selectedModel.id, user.id)
      if (success) {
        setModels(models.filter(m => m.id !== selectedModel.id))
        setDeleteDialogOpen(false)
        setSelectedModel(null)
      }
    } catch (error) {
      console.error('Error deleting model:', error)
    }
  }

  const handleMenuClick = (event: React.MouseEvent<HTMLElement>, model: ModelExport) => {
    setMenuAnchor(event.currentTarget)
    setSelectedModel(model)
  }

  const handleMenuClose = () => {
    setMenuAnchor(null)
    setSelectedModel(null)
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('id-ID', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  const formatFileSize = (bytes: number | null) => {
    if (!bytes) return 'Unknown'
    const kb = bytes / 1024
    if (kb < 1024) {
      return `${kb.toFixed(1)} KB`
    }
    const mb = kb / 1024
    return `${mb.toFixed(1)} MB`
  }

  if (!user) {
    return (
      <Container maxWidth="lg" sx={{ py: 3 }}>
        <Alert severity="warning">
          Silakan login untuk melihat model Anda.
        </Alert>
      </Container>
    )
  }

  return (
    <Box sx={{ minHeight: '100vh', display: 'flex', flexDirection: 'column' }}>
      <Navbar />
      <Container maxWidth="lg" sx={{ flexGrow: 1, py: 3 }}>
        {/* Header */}
        <Box display="flex" alignItems="center" mb={3}>
          <Typography variant="h4" fontWeight="bold" flexGrow={1}>
          <ViewInAr sx={{ mr: 1, verticalAlign: 'middle' }} />
          Model 3D Saya
        </Typography>
        <Button
          variant="contained"
          onClick={() => navigate('/three-editor')}
          sx={{ ml: 2 }}
        >
          Buat Model Baru
        </Button>
      </Box>

      {/* Stats */}
      <Grid container spacing={2} sx={{ mb: 3 }}>
        <Grid item xs={12} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h6" color="primary">
                {models.length}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Total Model
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h6" color="secondary">
                {models.reduce((sum, model) => sum + model.download_count, 0)}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Total Download
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h6" color="success.main">
                {models.filter(m => m.is_public).length}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Model Publik
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {loading ? (
        <Box display="flex" justifyContent="center" py={4}>
          <CircularProgress />
        </Box>
      ) : models.length === 0 ? (
        <Card>
          <CardContent sx={{ textAlign: 'center', py: 4 }}>
            <ViewInAr sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />
            <Typography variant="h6" gutterBottom>
              Belum Ada Model
            </Typography>
            <Typography variant="body2" color="text.secondary" paragraph>
              Anda belum membuat model 3D. Gunakan Three.js Editor untuk membuat model pertama Anda!
            </Typography>
            <Button
              variant="contained"
              onClick={() => navigate('/three-editor')}
            >
              Buat Model Pertama
            </Button>
          </CardContent>
        </Card>
      ) : (
        <Grid container spacing={3}>
          {models.map((model) => (
            <Grid item xs={12} md={6} lg={4} key={model.id}>
              <Card>
                <CardContent>
                  <Box display="flex" justifyContent="space-between" alignItems="flex-start" mb={2}>
                    <Typography variant="h6" noWrap>
                      {model.project_name}
                    </Typography>
                    <IconButton
                      size="small"
                      onClick={(e) => handleMenuClick(e, model)}
                    >
                      <MoreVert />
                    </IconButton>
                  </Box>

                  <Stack spacing={1} mb={2}>
                    <Box display="flex" alignItems="center" gap={1}>
                      <DateRange fontSize="small" color="action" />
                      <Typography variant="body2" color="text.secondary">
                        {formatDate(model.created_at)}
                      </Typography>
                    </Box>

                    <Box display="flex" alignItems="center" gap={1}>
                      <FileDownload fontSize="small" color="action" />
                      <Typography variant="body2" color="text.secondary">
                        {formatFileSize(model.stl_file_size)} â€¢ {model.download_count} downloads
                      </Typography>
                    </Box>
                  </Stack>

                  <Box display="flex" gap={1} mb={2}>
                    <Chip
                      icon={model.is_public ? <Public /> : <Private />}
                      label={model.is_public ? 'Publik' : 'Privat'}
                      size="small"
                      color={model.is_public ? 'success' : 'default'}
                    />
                    <Chip
                      label={model.model_type}
                      size="small"
                      variant="outlined"
                    />
                  </Box>

                  {model.description && (
                    <Typography variant="body2" color="text.secondary" mb={2}>
                      {model.description}
                    </Typography>
                  )}

                  <Button
                    fullWidth
                    variant="contained"
                    startIcon={downloading === model.id ? <CircularProgress size={16} /> : <Download />}
                    onClick={() => handleDownload(model)}
                    disabled={downloading === model.id}
                  >
                    {downloading === model.id ? 'Mengunduh...' : 'Download STL'}
                  </Button>
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      )}

      {/* Context Menu */}
      <Menu
        anchorEl={menuAnchor}
        open={Boolean(menuAnchor)}
        onClose={handleMenuClose}
      >
        <MenuItem onClick={() => {
          if (selectedModel) handleDownload(selectedModel)
          handleMenuClose()
        }}>
          <Download sx={{ mr: 2 }} />
          Download STL
        </MenuItem>
        <MenuItem onClick={() => {
          // TODO: Implement sharing
          handleMenuClose()
        }}>
          <Share sx={{ mr: 2 }} />
          Bagikan
        </MenuItem>
        <MenuItem onClick={() => {
          setDeleteDialogOpen(true)
          handleMenuClose()
        }}>
          <Delete sx={{ mr: 2 }} />
          Hapus
        </MenuItem>
      </Menu>

      {/* Delete Confirmation Dialog */}
      <Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)}>
        <DialogTitle>Hapus Model</DialogTitle>
        <DialogContent>
          <Typography>
            Apakah Anda yakin ingin menghapus model "{selectedModel?.project_name}"?
            Tindakan ini tidak dapat dibatalkan.
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDeleteDialogOpen(false)}>
            Batal
          </Button>
          <Button onClick={handleDelete} color="error" variant="contained">
            Hapus
          </Button>
        </DialogActions>
      </Dialog>
      </Container>
    </Box>
  )
}